{"ast":null,"code":"import { createElement, Fragment } from 'react';\nimport { Lexer } from 'marked';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar defaults = {\n  breaks: false,\n  gfm: true,\n  baseURL: null,\n  openLinksInNewTab: true,\n  langPrefix: 'language-',\n  renderer: null\n};\nvar defaults$1 = defaults;\nvar htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\"\n};\n/** Used to match HTML entities and HTML characters. */\n\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#(?:0+)?39);/g;\nvar reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\nvar unescape = function unescape() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, function (entity) {\n    return htmlUnescapes[entity] || \"'\";\n  }) : string;\n};\n\nvar joinBase = function joinBase(path, base) {\n  if (!base) {\n    return path;\n  }\n\n  try {\n    return new URL(path, base).href;\n  } catch (_unused) {\n    return path;\n  }\n};\n\nvar ReactRenderer = /*#__PURE__*/function () {\n  function ReactRenderer() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults$1;\n\n    _classCallCheck(this, ReactRenderer);\n\n    _defineProperty(this, \"elementId\", 0);\n\n    var renderer = options.renderer;\n    this.options = options;\n\n    if (renderer && _typeof(renderer) === 'object') {\n      Object.entries(renderer).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            rendererName = _ref2[0],\n            renderFunction = _ref2[1];\n\n        var originalRenderFunction = _this[rendererName];\n\n        if (rendererName !== 'h' && originalRenderFunction && typeof renderFunction === 'function') {\n          _this[rendererName] = function () {\n            _this.elementId += 1;\n            return renderFunction.bind(_this).apply(void 0, arguments);\n          };\n        }\n      });\n    }\n  }\n\n  _createClass(ReactRenderer, [{\n    key: \"h\",\n    value: function h(el, children, props) {\n      var elProps = {\n        key: \"marked-react-\".concat(this.elementId)\n      };\n      this.elementId += 1;\n      return /*#__PURE__*/createElement(el, _objectSpread2(_objectSpread2({}, props), elProps), children);\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(children, level) {\n      return this.h(\"h\".concat(level), children);\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(children) {\n      return this.h('p', children);\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, text) {\n      var url = joinBase(href, this.options.baseURL);\n      var target = this.options.openLinksInNewTab ? '_blank' : null;\n      return this.h('a', text, {\n        href: url,\n        target: target\n      });\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, text, title) {\n      var url = joinBase(href, this.options.baseURL);\n      return this.h('img', null, {\n        src: url,\n        alt: text,\n        title: title\n      });\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(code, lang) {\n      var className = lang ? \"\".concat(this.options.langPrefix).concat(lang) : null;\n      return this.h('code', code, {\n        className: className\n      });\n    }\n  }, {\n    key: \"code\",\n    value: function code(_code, lang) {\n      return this.h('pre', this.codespan(_code, lang));\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(children) {\n      return this.h('blockquote', children);\n    }\n  }, {\n    key: \"list\",\n    value: function list(children, ordered) {\n      return this.h(ordered ? 'ol' : 'ul', children);\n    }\n  }, {\n    key: \"listItem\",\n    value: function listItem(children) {\n      return this.h('li', children);\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return this.h('input', null, {\n        type: 'checkbox',\n        disabled: true,\n        checked: checked\n      });\n    }\n  }, {\n    key: \"table\",\n    value: function table(children) {\n      return this.h('table', children);\n    }\n  }, {\n    key: \"tableHeader\",\n    value: function tableHeader(children) {\n      return this.h('thead', children);\n    }\n  }, {\n    key: \"tableBody\",\n    value: function tableBody(children) {\n      return this.h('tbody', children);\n    }\n  }, {\n    key: \"tableRow\",\n    value: function tableRow(children) {\n      return this.h('tr', children);\n    }\n  }, {\n    key: \"tableCell\",\n    value: function tableCell(children, flags) {\n      var tag = flags.header ? 'th' : 'td';\n      return this.h(tag, children, {\n        align: flags.align\n      });\n    }\n  }, {\n    key: \"strong\",\n    value: function strong(children) {\n      return this.h('strong', children);\n    }\n  }, {\n    key: \"em\",\n    value: function em(children) {\n      return this.h('em', children);\n    }\n  }, {\n    key: \"del\",\n    value: function del(children) {\n      return this.h('del', children);\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      return _text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html) {\n      return _html;\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return this.h('hr');\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return this.h('br');\n    }\n  }]);\n\n  return ReactRenderer;\n}();\n\nvar ReactRenderer$1 = ReactRenderer;\n\nvar ReactParser = /*#__PURE__*/function () {\n  function ReactParser() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults$1;\n\n    _classCallCheck(this, ReactParser);\n\n    this.options = options;\n    this.renderer = options.renderer || new ReactRenderer$1();\n  }\n\n  _createClass(ReactParser, [{\n    key: \"parse\",\n    value: function parse(tokens) {\n      var _this = this;\n\n      return tokens.map(function (token) {\n        switch (token.type) {\n          case 'space':\n            {\n              return null;\n            }\n\n          case 'heading':\n            {\n              return _this.renderer.heading(_this.parseInline(token.tokens), token.depth);\n            }\n\n          case 'paragraph':\n            {\n              return _this.renderer.paragraph(_this.parseInline(token.tokens));\n            }\n\n          case 'text':\n            {\n              return token.tokens ? _this.parseInline(token.tokens) : token.text;\n            }\n\n          case 'blockquote':\n            {\n              var quote = _this.parse(token.tokens);\n\n              return _this.renderer.blockquote(quote);\n            }\n\n          case 'list':\n            {\n              var children = token.items.map(function (item) {\n                var listItemChildren = [];\n\n                if (item.task) {\n                  listItemChildren.push(_this.renderer.checkbox(item.checked));\n                }\n\n                listItemChildren.push(_this.parse(item.tokens));\n                return _this.renderer.listItem(listItemChildren);\n              });\n              return _this.renderer.list(children, token.ordered);\n            }\n\n          case 'code':\n            {\n              return _this.renderer.code(token.text, token.lang);\n            }\n\n          case 'html':\n            {\n              return _this.renderer.html(token.text);\n            }\n\n          case 'table':\n            {\n              var headerCells = token.header.map(function (cell, index) {\n                return _this.renderer.tableCell(_this.parseInline(cell.tokens), {\n                  header: true,\n                  align: token.align[index]\n                });\n              });\n\n              var headerRow = _this.renderer.tableRow(headerCells);\n\n              var header = _this.renderer.tableHeader(headerRow);\n\n              var bodyChilren = token.rows.map(function (row, index) {\n                var rowChildren = row.map(function (cell) {\n                  return _this.renderer.tableCell(_this.parseInline(cell.tokens), {\n                    header: false,\n                    align: token.align[index]\n                  });\n                });\n                return _this.renderer.tableRow(rowChildren);\n              });\n\n              var body = _this.renderer.tableBody(bodyChilren);\n\n              return _this.renderer.table([header, body]);\n            }\n\n          case 'hr':\n            {\n              return _this.renderer.hr();\n            }\n\n          default:\n            {\n              console.warn(\"Token with \\\"\".concat(token.type, \"\\\" type was not found\")); // eslint-disable-line no-console\n\n              return null;\n            }\n        }\n      });\n    }\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens) {\n      var _this2 = this;\n\n      return tokens.map(function (token) {\n        switch (token.type) {\n          case 'text':\n            {\n              return _this2.renderer.text(unescape(token.text));\n            }\n\n          case 'strong':\n            {\n              return _this2.renderer.strong(_this2.parseInline(token.tokens));\n            }\n\n          case 'em':\n            {\n              return _this2.renderer.em(_this2.parseInline(token.tokens));\n            }\n\n          case 'del':\n            {\n              return _this2.renderer.del(_this2.parseInline(token.tokens));\n            }\n\n          case 'codespan':\n            {\n              return _this2.renderer.codespan(unescape(token.text));\n            }\n\n          case 'link':\n            {\n              return _this2.renderer.link(token.href, _this2.parseInline(token.tokens));\n            }\n\n          case 'image':\n            {\n              return _this2.renderer.image(token.href, token.text, token.title);\n            }\n\n          case 'html':\n            {\n              return _this2.renderer.html(token.text);\n            }\n\n          case 'br':\n            {\n              return _this2.renderer.br();\n            }\n\n          case 'escape':\n            {\n              return _this2.renderer.text(token.text);\n            }\n\n          default:\n            console.warn(\"Token with \\\"\".concat(token.type, \"\\\" type was not found\")); // eslint-disable-line no-console\n\n            return null;\n        }\n      });\n    }\n  }]);\n\n  return ReactParser;\n}();\n\nvar ReactParser$1 = ReactParser;\n\nvar validateComponentProps = function validateComponentProps(props) {\n  if (props.value && typeof props.value !== 'string') {\n    throw new TypeError(\"[marked-react]: Expected value to be of type string but got \".concat(_typeof(props.value)));\n  }\n\n  if (props.children && typeof props.children !== 'string') {\n    throw new TypeError(\"[marked-react]: Expected children to be of type string but got \".concat(_typeof(props.children)));\n  }\n};\n\nvar Markdown = function Markdown(props) {\n  var _ref, _props$value;\n\n  validateComponentProps(props); // lexer options\n\n  var lexerOptions = {\n    breaks: props.breaks,\n    gfm: props.gfm\n  }; // convert input markdown into tokens\n\n  var lexer = new Lexer(lexerOptions);\n  var tokens = lexer.lex((_ref = (_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : props.children) !== null && _ref !== void 0 ? _ref : ''); // parser options\n\n  var parserOptions = {\n    renderer: new ReactRenderer$1({\n      renderer: props.renderer,\n      baseURL: props.baseURL,\n      openLinksInNewTab: props.openLinksInNewTab,\n      langPrefix: props.langPrefix\n    })\n  };\n  var children = new ReactParser$1(parserOptions).parse(tokens);\n  return /*#__PURE__*/createElement(Fragment, null, children);\n};\n\nMarkdown.defaultProps = defaults$1;\nvar Markdown$1 = Markdown;\nexport { Markdown$1 as default };","map":{"version":3,"sources":["../src/defaults.js","../src/helpers.js","../src/ReactRenderer.js","../src/ReactParser.js","../src/Markdown.js"],"names":["defaults","breaks","gfm","baseURL","openLinksInNewTab","langPrefix","renderer","htmlUnescapes","reEscapedHtml","reHasEscapedHtml","RegExp","unescape","string","joinBase","ReactRenderer","options","Object","rendererName","renderFunction","originalRenderFunction","elProps","key","elementId","createElement","children","href","url","target","src","alt","title","code","className","lang","ordered","type","disabled","checked","tag","flags","align","ReactParser","token","quote","listItemChildren","item","headerCells","cell","header","headerRow","bodyChilren","rowChildren","body","console","validateComponentProps","props","Markdown","lexerOptions","lexer","tokens","parserOptions"],"mappings":"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","sourcesContent":["const defaults = {\n  breaks: false,\n  gfm: true,\n  baseURL: null,\n  openLinksInNewTab: true,\n  langPrefix: 'language-',\n  renderer: null,\n};\n\nexport default defaults;\n","const htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\n\n/** Used to match HTML entities and HTML characters. */\nconst reEscapedHtml = /&(?:amp|lt|gt|quot|#(?:0+)?39);/g;\nconst reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\nexport const unescape = (string = '') => {\n  return reHasEscapedHtml.test(string)\n    ? string.replace(reEscapedHtml, (entity) => htmlUnescapes[entity] || \"'\")\n    : string;\n};\n\nexport const joinBase = (path, base) => {\n  if (!base) {\n    return path;\n  }\n\n  try {\n    return new URL(path, base).href;\n  } catch {\n    return path;\n  }\n};\n","import { createElement } from 'react';\n\nimport defaults from './defaults.js';\nimport { joinBase } from './helpers.js';\n\nclass ReactRenderer {\n  elementId = 0;\n\n  constructor(options = defaults) {\n    const { renderer } = options;\n\n    this.options = options;\n\n    if (renderer && typeof renderer === 'object') {\n      Object.entries(renderer).forEach(([rendererName, renderFunction]) => {\n        const originalRenderFunction = this[rendererName];\n\n        if (rendererName !== 'h' && originalRenderFunction && typeof renderFunction === 'function') {\n          this[rendererName] = (...args) => {\n            this.elementId += 1;\n            return renderFunction.bind(this)(...args);\n          };\n        }\n      });\n    }\n  }\n\n  h(el, children, props) {\n    const elProps = {\n      key: `marked-react-${this.elementId}`,\n    };\n\n    this.elementId += 1;\n    return createElement(el, { ...props, ...elProps }, children);\n  }\n\n  heading(children, level) {\n    return this.h(`h${level}`, children);\n  }\n\n  paragraph(children) {\n    return this.h('p', children);\n  }\n\n  link(href, text) {\n    const url = joinBase(href, this.options.baseURL);\n    const target = this.options.openLinksInNewTab ? '_blank' : null;\n    return this.h('a', text, { href: url, target });\n  }\n\n  image(href, text, title) {\n    const url = joinBase(href, this.options.baseURL);\n    return this.h('img', null, { src: url, alt: text, title });\n  }\n\n  codespan(code, lang) {\n    const className = lang ? `${this.options.langPrefix}${lang}` : null;\n    return this.h('code', code, { className });\n  }\n\n  code(code, lang) {\n    return this.h('pre', this.codespan(code, lang));\n  }\n\n  blockquote(children) {\n    return this.h('blockquote', children);\n  }\n\n  list(children, ordered) {\n    return this.h(ordered ? 'ol' : 'ul', children);\n  }\n\n  listItem(children) {\n    return this.h('li', children);\n  }\n\n  checkbox(checked) {\n    return this.h('input', null, { type: 'checkbox', disabled: true, checked });\n  }\n\n  table(children) {\n    return this.h('table', children);\n  }\n\n  tableHeader(children) {\n    return this.h('thead', children);\n  }\n\n  tableBody(children) {\n    return this.h('tbody', children);\n  }\n\n  tableRow(children) {\n    return this.h('tr', children);\n  }\n\n  tableCell(children, flags) {\n    const tag = flags.header ? 'th' : 'td';\n    return this.h(tag, children, { align: flags.align });\n  }\n\n  strong(children) {\n    return this.h('strong', children);\n  }\n\n  em(children) {\n    return this.h('em', children);\n  }\n\n  del(children) {\n    return this.h('del', children);\n  }\n\n  text(text) {\n    return text;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  hr() {\n    return this.h('hr');\n  }\n\n  br() {\n    return this.h('br');\n  }\n}\n\nexport default ReactRenderer;\n","import ReactRenderer from './ReactRenderer.js';\nimport { unescape } from './helpers.js';\nimport defaults from './defaults.js';\n\nclass ReactParser {\n  constructor(options = defaults) {\n    this.options = options;\n    this.renderer = options.renderer || new ReactRenderer();\n  }\n\n  parse(tokens) {\n    return tokens.map((token) => {\n      switch (token.type) {\n        case 'space': {\n          return null;\n        }\n\n        case 'heading': {\n          return this.renderer.heading(this.parseInline(token.tokens), token.depth);\n        }\n\n        case 'paragraph': {\n          return this.renderer.paragraph(this.parseInline(token.tokens));\n        }\n\n        case 'text': {\n          return token.tokens ? this.parseInline(token.tokens) : token.text;\n        }\n\n        case 'blockquote': {\n          const quote = this.parse(token.tokens);\n          return this.renderer.blockquote(quote);\n        }\n\n        case 'list': {\n          const children = token.items.map((item) => {\n            const listItemChildren = [];\n\n            if (item.task) {\n              listItemChildren.push(this.renderer.checkbox(item.checked));\n            }\n\n            listItemChildren.push(this.parse(item.tokens));\n\n            return this.renderer.listItem(listItemChildren);\n          });\n\n          return this.renderer.list(children, token.ordered);\n        }\n\n        case 'code': {\n          return this.renderer.code(token.text, token.lang);\n        }\n\n        case 'html': {\n          return this.renderer.html(token.text);\n        }\n\n        case 'table': {\n          const headerCells = token.header.map((cell, index) => {\n            return this.renderer.tableCell(this.parseInline(cell.tokens), { header: true, align: token.align[index] });\n          });\n\n          const headerRow = this.renderer.tableRow(headerCells);\n          const header = this.renderer.tableHeader(headerRow);\n\n          const bodyChilren = token.rows.map((row, index) => {\n            const rowChildren = row.map((cell) => {\n              return this.renderer.tableCell(\n                this.parseInline(cell.tokens), { header: false, align: token.align[index] },\n              );\n            });\n\n            return this.renderer.tableRow(rowChildren);\n          });\n\n          const body = this.renderer.tableBody(bodyChilren);\n\n          return this.renderer.table([header, body]);\n        }\n\n        case 'hr': {\n          return this.renderer.hr();\n        }\n\n        default: {\n          console.warn(`Token with \"${token.type}\" type was not found`); // eslint-disable-line no-console\n          return null;\n        }\n      }\n    });\n  }\n\n  parseInline(tokens) {\n    return tokens.map((token) => {\n      switch (token.type) {\n        case 'text': {\n          return this.renderer.text(unescape(token.text));\n        }\n\n        case 'strong': {\n          return this.renderer.strong(this.parseInline(token.tokens));\n        }\n\n        case 'em': {\n          return this.renderer.em(this.parseInline(token.tokens));\n        }\n\n        case 'del': {\n          return this.renderer.del(this.parseInline(token.tokens));\n        }\n\n        case 'codespan': {\n          return this.renderer.codespan(unescape(token.text));\n        }\n\n        case 'link': {\n          return this.renderer.link(token.href, this.parseInline(token.tokens));\n        }\n\n        case 'image': {\n          return this.renderer.image(token.href, token.text, token.title);\n        }\n\n        case 'html': {\n          return this.renderer.html(token.text);\n        }\n\n        case 'br': {\n          return this.renderer.br();\n        }\n\n        case 'escape': {\n          return this.renderer.text(token.text);\n        }\n\n        default:\n          console.warn(`Token with \"${token.type}\" type was not found`); // eslint-disable-line no-console\n          return null;\n      }\n    });\n  }\n}\n\nexport default ReactParser;\n","import { createElement, Fragment } from 'react';\nimport { Lexer } from 'marked';\n\nimport defaults from './defaults.js';\nimport ReactParser from './ReactParser.js';\nimport ReactRenderer from './ReactRenderer.js';\n\nconst validateComponentProps = (props) => {\n  if (props.value && typeof props.value !== 'string') {\n    throw new TypeError(`[marked-react]: Expected value to be of type string but got ${typeof props.value}`);\n  }\n\n  if (props.children && typeof props.children !== 'string') {\n    throw new TypeError(`[marked-react]: Expected children to be of type string but got ${typeof props.children}`);\n  }\n};\n\nconst Markdown = (props) => {\n  validateComponentProps(props);\n\n  // lexer options\n  const lexerOptions = {\n    breaks: props.breaks,\n    gfm: props.gfm,\n  };\n\n  // convert input markdown into tokens\n  const lexer = new Lexer(lexerOptions);\n  const tokens = lexer.lex(props.value ?? props.children ?? '');\n\n  // parser options\n  const parserOptions = {\n    renderer: new ReactRenderer({\n      renderer: props.renderer,\n      baseURL: props.baseURL,\n      openLinksInNewTab: props.openLinksInNewTab,\n      langPrefix: props.langPrefix,\n    }),\n  };\n\n  const children = new ReactParser(parserOptions).parse(tokens);\n\n  return createElement(Fragment, null, children);\n};\n\nMarkdown.defaultProps = defaults;\n\nexport default Markdown;\n"]},"metadata":{},"sourceType":"module"}